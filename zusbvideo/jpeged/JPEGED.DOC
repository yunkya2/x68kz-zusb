／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／
／									／
／									／
／	ＪＰＥＧＥＤ．Ｒ  V1.26		1993/11/06-1996/11/10		／
／									／
／			original program 砺波盛里(Nifty GAG00525)氏	／
／									／
／			modified program 藤原尚伸(Nifty GHH02344)	／
／									／
／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／／
==========================================================================
●特徴
==========================================================================
　・砺波盛里(Nifty GAG00525)氏のJPEG.X V1.00をベースに高速化
　・高速！(展開はｵﾘｼﾞﾅﾙの2〜25倍速,圧縮は1.1〜2.0倍速(X68000上で))
　・展開側は低精度！(R･G･B成分それぞれ±2程誤差有り)
　・圧縮側は精度が大幅に向上！
　・ﾒﾓﾘを食う！(ｵﾘｼﾞﾅﾙより180KBほど余計に食う)
　・ﾏｯﾊﾊﾞﾝﾄﾞが目立たない！？(2×2ﾃﾞｨｻﾞでﾏｯﾊﾊﾞﾝﾄﾞ除去を行う)
　・ﾒﾓﾘが足りなくてもﾃﾞｨｽｸをﾒﾓﾘ代わりにして画像の展開が出来る！
　・ﾃﾝｷｰ,ｶｰｿﾙｷｰ,ﾏｳｽでｽｸﾛｰﾙ表示
　・512×512以上のｻｲｽﾞの画像の圧縮／展開を、ﾒﾓﾘ,ﾌｧｲﾙ上の仮想画面を対象に可能
　・ｵｰﾄｽｸﾛｰﾙ,ｵｰﾄｽﾞｰﾑもするぞ！
　・2ﾊﾟｽで圧縮し、さらにﾌｧｲﾙｻｲｽﾞを小さく出来る

==========================================================================
●使用する前に
==========================================================================
　JPEGED.Rは、高速化の手段の一つとして、普通は16/32bitまで精度を取るところ
を12bitにし、計算の精度を犠牲にました。従って、展開画像が汚くなる事があり
ます。(RGB各8bitなら最大±8ほどの誤差があるはず)

　JPEGED.Rの生きる道はただ一つ！

　　「これってどんな絵だっけ？、ちょっと見てみようかな」

　です。
　正確なきれいな画像を見たい場合はｵﾘｼﾞﾅﾙのJPEG.Xを使うか、DJ.Xを使うかしま
しょう。(どちらかというと、DJ.Xの方が色がきれいに出ていると思う)

==========================================================================
●使用方法
==========================================================================
　JPEGED [Option] ﾌｧｲﾙ名[.JPG]

・全体で有効なｵﾌﾟｼｮﾝ

　　-?		使用方法の表示

　　-L[x1,y1,[x2,y2]]	ﾛｰﾄﾞ(JPEG展開)
　　-S[x1,y1,[x2,y2]]	ｾｰﾌﾞ(JPEG圧縮)

　　-VSx,y,$address	ﾒﾓﾘ上の仮想画面(16bitｶﾗｰ)を対象にJPEG圧縮・展開
　　-VSx,y,fname	ﾌｧｲﾙ上の仮想画面(16bitｶﾗｰ)を対象にJPEG圧縮・展開

				x,yは仮想画面の縦と横のﾄﾞｯﾄ数です
				addressはﾒﾓﾘ上のｱﾄﾞﾚｽを指定します
				fnameはﾌｧｲﾙ名を指定します

　　-A		ｱｽﾍﾟｸﾄの変更(正方形)
　　-Axd,yd		ﾋﾟｸｾﾙ密度の指定(ﾃﾞﾌｫﾙﾄは 3,2)
    -P		ｵﾌﾟｼｮﾝに'/'を使用出来なくする

・ﾛｰﾄﾞ側で有効なｵﾌﾟｼｮﾝ

　　-H		ﾍｯﾀﾞ情報のみ出力
　　-N		画像をｸﾘｱしない
　　-Bx1,y1	画像ﾌｧｲﾙ上の表示開始位置(ﾃﾞﾌｫﾙﾄは 0,0)
　　-Inx/mx[,ny/my]	間引間隔(ﾃﾞﾌｫﾙﾄは 1/1,1/1)
　　-Fn		表示ﾓｰﾄﾞ
		n=0  画面内に収まらない場合はｽｸﾛｰﾙして表示(ﾃﾞﾌｫﾙﾄ)
		  1  画像表示範囲全体に引き延ばして表示
		  2  画像表示範囲に収まるように出来るだけ大きく表示
		  3  画像表示範囲に収まるように表示(画像の持つｱｽﾍﾟｸﾄのまま表示)
　　-Kn   	画像表示後、ｷｰ入力待ち制御(ﾃﾞﾌｫﾙﾄ=0)
		n=+1 ｷｰ入力待ちをする
		  +2 ｵｰﾄｽｸﾛｰﾙ&ｽﾞｰﾑする(移動速度 100dot/s)
		  +4 TV Ctrlｷｰもｽｸﾛｰﾙ高速化ｷｰとして強制使用する
		  nの指定が無い場合は、n=+1+2=3が指定されたことになる

　　-Wpath	ﾒﾓﾘが足りない場合、ﾃﾞｨｽｸに展開する
		path指定が無い場合は環境変数tempを参照する

　　-Jn		画像の補正機能(ﾃﾞﾌｫﾙﾄ=2)
		n=+1	X68000のJPEGのｾｰﾊﾞｰで作られた、ﾍｯﾀﾞ情報のｱｽﾍﾟｸﾄ値が
			正しくない画像の自動補正(ｱｽﾍﾟｸﾄを3:2に補正)を行わない

			注)補正を行うのは以下のような画像です

			 1.画像ｻｲｽﾞが512×512で、ｱｽﾍﾟｸﾄが1:1で、DC成分のﾊﾌﾏﾝ符
			   号のbit数が16になる画像(ｶﾉｰﾌﾟｽ製 JPGS.Xで作ったﾌｧｲﾙ)
			 2.ｱｽﾍﾟｸﾄが2:3で、DC成分のﾊﾌﾏﾝ符号のbit数が17になる画像
			  (JPEG.X または JPEGED.X +0.01〜+0.06 で作ったﾌｧｲﾙ)
		  +2	終了時の画像のHome位置を(0,0)に戻す処理を行う
		  nの指定が無い場合は、n=+1+2=3が指定されたことになる

・ｾｰﾌﾞ側で有効なｵﾌﾟｼｮﾝ

    -2		2ﾊﾟｽで圧縮(画質が劣化せずにﾌｧｲﾙｻｲｽﾞが少し小さくなる)
　　-Mn		変換ﾓｰﾄﾞ（離散ｺｻｲﾝ）
		n=0  U,Vﾃﾞｰﾀを無くす(ﾓﾉｸﾛ画像にする)
		  1  8*8 pixel を3個の Y,U,V ﾌﾞﾛｯｸに分解して処理する。
		  2  U,Vﾃﾞｰﾀ(色差信号)を 1/2 に間引く。
		  3  U,Vﾃﾞｰﾀを 1/4 に間引く。(ﾃﾞﾌｫﾙﾄ)
　　-Cfname	ｺﾒﾝﾄﾌｧｲﾙの指定
　　-C"comment"	ｺﾒﾝﾄの指定
　　-Qfname	量子化ﾃｰﾌﾞﾙの指定
　　-Qn		量子化ﾚﾍﾞﾙ(ﾃﾞﾌｫﾙﾄ=1)
		値が小さい程圧縮率が高くなる

==========================================================================
●ｷｰ操作
==========================================================================
	ｶｰｿﾙｷｰ		画像ｽｸﾛｰﾙ(移動速度 200dot/s)
	ﾃﾝｷｰ(8246)	ｶｰｿﾙｷｰと同じ(但し、上下の移動が逆)
	Roll Up		画像縮小
	Roll Down	画像拡大

	Opt.1		これを押しながらｽｸﾛｰﾙ,拡大,縮小を行うと8倍速の動作
			(ｵｰﾄｽｸﾛｰﾙの速度にも影響する)
	Ctrl		Opt.1ｷｰと同じ
	Opt.2		Opt.1ｷｰと同じ(-Kｵﾌﾟｼｮﾝで指定した場合、又はTVｺﾝﾄﾛｰﾙに
			使用しない場合のみ)
	Shift		Opt.1ｷｰと同じ(-Kｵﾌﾟｼｮﾝで指定した場合のみ)

	Esc		終了
	Return		終了
	Space		終了
	Home		一度目は、倍率を１倍に戻し、画像の真ん中に移動する
			二度目は、画像を画面内に収まるように表示
			(-F3ｵﾌﾟｼｮﾝと同様の動作)
	Undo		画像情報と画像に含まれるｺﾒﾝﾄを表示

	　　尚、ｽｸﾛｰﾙ,拡大,縮小のｷｰは、最初のひと押しで1dot変化し、
	　0.2秒以上押し続けるとﾘﾋﾟｰﾄ開始します

==========================================================================
●ﾏｳｽ操作
==========================================================================
	ﾏｳｽ移動		画像がｽｸﾛｰﾙする
	左ﾎﾞﾀﾝ		画像縮小
	右ﾎﾞﾀﾝ		画像拡大

	左右同時ｸﾘｯｸ	終了

	　　尚、画像拡大,縮小は、最初のひと押しで1dot変化し、
	　0.2秒以上押し続けるとﾘﾋﾟｰﾄ開始します

==========================================================================
●バグまたは制限事項
==========================================================================
　　-i,-f1,-f2ｵﾌﾟｼｮﾝで表示した場合、ﾃﾞｨｻﾞﾊﾟﾀｰﾝまで間引きまたは引き延ばしさ
  れてしまいます。従って、格子模様が目立つ事があります。

　　ｱｽﾍﾟｸﾄが1:1以外の画像は、面倒なので全てｱｽﾍﾟｸﾄ3:2にして表示します。^^;

　　複数の画像が一つのﾌｧｲﾙになっているようなものは、最初の一枚しか表示しません

　　画像の大きさは、縦横共に1〜16383ﾄﾞｯﾄまでしか対応しないでしょう。
　（それ以上は、どうなるか判りません^^;）

　　040turboでcopy back modeの時、画像のｽｸﾛｰﾙ&拡縮表示がおかしくなる不具合が
　起きます。(命令を自己生成した後に、ちゃんとｷｬｯｼｭﾌﾗｯｼｭしてるのになぜ？(T_T))

　　表示倍率が非常に大きい時（256倍とか)、画面書き換えしないでしまう領域
　が発生することがあります。

==========================================================================
●速度分布
==========================================================================
   ｷｬｯｼｭﾄﾞﾗｲﾊﾞ DCACHE2 -m512を常駐させ ｷｬｯｼｭに全部ﾋｯﾄする状態で測定

 以下の画像で

   file size 53148 Bytes
   picture size 512*512
   色相成分 1/4
				     所要秒数
				    68000(17.5MHz) 68030(25MHz) 68040(25MHz)
						   cache on     copy-back
	0.JPEGED.R読み込み.......... 0.09
	1.ﾍｯﾀﾞ解析
	　ﾍｯﾀﾞ情報表示.............. 0.01
	  画面ﾓｰﾄﾞ設定.............. 0.01
	　ﾌｧｲﾙ読み込み
	  ﾃｰﾌﾞﾙ作成................. 0.14
	2.ﾊﾌﾏﾝ復号
	  逆ジグザグ
	  逆量子化.................. 1.07 (72)
	3.逆DCT..................... 1.24 (84)
	4.YUVtoRGB変換.............. 1.22 (81)
　　　　5.VRAMへ出力................ 0.20 (13)
	6.その他.................... 0.20 (13)

	2〜6の合計.................. 3.95 (264)

	0〜6の合計.................. 4.18 (279)     2.10 (200)  1.22 (116)

 でした。(括弧内は、画像1ﾄﾞｯﾄ当たりの所要ｸﾛｯｸ)

　 ちなみに、上で展開した画像をPICｾｰﾌﾞし、同じ条件でHAPICで展開すると4.05秒
 でした。

==========================================================================
●アルゴリズムに関する高速化
==========================================================================
　・乗算は全て、乗算ﾃｰﾌﾞﾙを使用する

　　　これは、高速化の定番なので、真っ先にIDCT,逆量子化,YUV to RGB変換で
　　やりました。
　　　乗算が、単なるﾒﾓﾘｱｸｾｽになるので、乗算ﾃｰﾌﾞﾙの構造をうまく変えると
　　後の計算が非常に楽に出来ます。


　・ﾊﾌﾏﾝ複合入力で、値を格納する時、逆ジグザグと逆量子化も同時に行い
　別々に処理した場合の、ｵｰﾊﾞｰﾍｯﾄﾞを減らす

　　　これを行うと、逆量子化で、値が０の場合の乗算処理を省略する事が
　　出来ます。


　・ﾊﾌﾏﾝ復号入力で、8ﾋﾞｯﾄ分を一気にﾃﾞｺｰﾄﾞするﾃｰﾌﾞﾙを使用する

　　　このとき、AC,DC値も8ﾋﾞｯﾄの中に含まれる場合は、それも一緒にﾃﾞｺｰﾄﾞ
　　してしまうと、さらに早くなります。


　・ﾊﾌﾏﾝ複合入力で、EOBが出たらそのﾌﾞﾛｯｸの残りは０なので、残りの０の
　個数を覚えておきIDCTの乗算で０の部分の計算を省略するようにする。

　　　この高速化を行うと、EOBが出た後のﾌﾞﾛｯｸの残りに０を書き込む処理が
　　省略でき、さらに高速化出来ます。＼(^o^)／

　　　そして、EOBが出た後のﾌﾞﾛｯｸの残りが63の場合、そのﾌﾞﾛｯｸ内の全ての
　　ﾄﾞｯﾄは同じ値になる事を利用して、YUV to RGB変換処理でも、処理を省略
　　することが出来、いもずる式に高速化出来ます。＼(^o^)／

　　　また、この応用として、EOBが出る前の０の値もIDCTで考慮に入れると
　　少し高速化できます。(^^)


==========================================================================
●命令単位での高速化
==========================================================================
　・movemや-(an)や+(an)が使えるように、内部のﾜｰｸやﾃｰﾌﾞﾙの構造を変える
　・やっぱ680x0なのでd0-d7,a0-a7ﾚｼﾞｽﾀは全部使う。
　　(a7も、ｽﾀｯｸﾎﾟｲﾝﾀとして使用したままﾃｰﾌﾞﾙﾎﾟｲﾝﾀとして使えるように内部
　　構造を変える)
　・ｽｰﾊﾟﾊﾞｲｻﾞで突っ走り、VRAMｱｸｾｽをIOCSを使わずに直接行う。(^^;
　・拡大、縮小表示は、命令を自己生成して行う。
　・同じ処理でも、68000で同じｸﾛｯｸ数で命令数が違う場合は、命令数の少ない
　方を使う（きっと68020以上では命令数の少ない方が早いだろう(^^;）
　・ﾙｰﾌﾟはﾒﾓﾘを圧迫しない限り、展開する。
　・add.w reg,anよりもadd.l reg,anの方が2clock早い
　・その他(^^;

　まぁ、普通よくやる事ですね。


==========================================================================
●転載＆配布＆改変条件
==========================================================================
　通常の転載と配布においては

  ・JPEGED.DOCとJPEGED.Rを改変せずに一緒に転載，配布することが条件です。
　　（アーカイブの形式は問いません。LZXしたままでも構いません）
　・転載，配布の報告義務はありません（知らせてくれるとうれしいですけど）

　です。
　もし、JPEGED.Rを改変して配布したいという方は

　・差分形式による配布
　　（ﾍﾙﾌﾟﾒｯｾｰｼﾞのﾀｲﾄﾙに改造してるよっていうﾒｯｾｰｼﾞを入れる事）
　・別のﾌｧｲﾙ名にして配布
　　（同じ名前で、違うﾌﾟﾛｸﾞﾗﾑがごろごろするのは気持ち悪いので）

　のどちらかで行って下さい。
　JPEGED.Rの元となったJPEG.Xが、改変を許しているので、JPEGED.Rも上記
条件付きで改変を許します。


==========================================================================
●最後に
==========================================================================
　なんとか、自分で高速なJPEGﾛｰﾀﾞｰを作れないもんかのぉ・・・・と、色々JPEGの
仕様を探していた時、JPEG.XのｿｰｽがNifty-ServeのFQLD2にあったので、ﾀﾞｳﾝﾛｰﾄﾞし
てそのﾄﾞｷｭﾒﾝﾄをみたら、

	「高速化に挑戦する、自作のツールに組み込む、
		新機種に対応させる。どれも御随意に。」

　と書いていたので、「こりゃ〜、こいつを高速化した方が楽かな？」と思い色々
やった結果、なんとか平均4.8倍速まで漕ぎ着けました。まぁ、画像によっては25倍
速ってのもありますが・・・特殊な例なので一般的な絵では無理でしょう
(例えば真っ白な絵とか・・・)

　さらに早くなるかどうかは、神の味噌汁ってやつです。
　(もっと、高速にするｱﾙｺﾞﾘｽﾞﾑが思い付かない・・・)

　それでは、最後に、JPEG.Xのｿｰｽを公開して下さった砺波盛里氏、また、色々と
不具合報告、感想、要望をして下さった皆様方に感謝して終わりにしたいと思います。

　でわでわ・・・・
					作者所有ＩＤ

					NIFTY-Serve		GHH02344
					ふぁんき〜核爆ねっと	KUSO0106

					e-mail address

					GHH02344@niftyserve.or.jp
					oshow@ca2.so-net.or.jp
